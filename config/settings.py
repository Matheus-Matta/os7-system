"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os 
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

DEBUG = os.getenv('DEBUG', 'False') == 'True'

SECRET_KEY = os.getenv('SECRET_KEY', 'chave-padrao-insegura')

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')
CORS_ALLOWED_ORIGINS = os.getenv('ORIGINS', '').split(',')
CSRF_TRUSTED_ORIGINS = os.getenv('ORIGINS', '').split(',')

from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'corsheaders',
    'modeltranslation',
    'unfold',
    "unfold.contrib.filters",         # filtros avançados
    "unfold.contrib.forms",           # campos e formulários especiais
    "unfold.contrib.inlines",         # inlines paginados/ordenáveis
    "unfold.contrib.import_export",   # integração com django-import-export
    "unfold.contrib.guardian",        # se usar django-guardian 
    "unfold.contrib.simple_history",  # se usar django-simple-history 
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django_extensions",
    'simple_history',
    "crispy_forms",
    
]

MY_APPS = [
    '_app',
    '_app.siteconfig',
    '_app.analytics',
]

INSTALLED_APPS += MY_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "django.middleware.locale.LocaleMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',    
    'simple_history.middleware.HistoryRequestMiddleware',

]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': False,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'config.context_config.config',
                'django.template.context_processors.i18n',
            ],
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
            ],
        },
    },
]

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
# WhiteNoise settings para evitar cache
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Defina a URL base para servir arquivos de mídia 
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'mediafiles'

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DB_ENGINE'),
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# Internacionalização

# 1.1 – Habilite a internacionalização
USE_I18N = True
LANGUAGE_CODE = 'en'            # idioma padrão
LOCALE_PATHS = [BASE_DIR / 'locale']

LANGUAGES = [
    ('pt-br', _('Português (Brasil)')),
    ('en',    _('English')),
]

# Onde ficam seus arquivos de tradução (.po/.mo)
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


UNFOLD = {
    "SITE_TITLE": "Administrador",     
    "SITE_HEADER": "os7 Painel",          
    "SITE_SUBHEADER": "Painel de Controle",
    "SITE_URL": reverse_lazy("index"),
    "DASHBOARD_CALLBACK": "_app.analytics.admin.test_dashboard_stats",
    "SIDEBAR": {
        "show_search": False,
        "show_all_applications": False,
        "navigation": [
            # Grupo “Principal”, não colapsável
            {
                "title": _("Principal"),
                "separator": False,      # sem linha antes
                "collapsible": False,    # sempre expandido
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",
                        "link": reverse_lazy("admin:index"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Configurações do Site"),
                        "icon": "settings",
                        "link": reverse_lazy("admin:config_siteconfig_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
            # Grupo “Users & Groups” com separador e colapsável
            {
                "title": _("Usuários & Grupos"),
                "separator": True,       # desenha linha acima
                "icon": "people",
                "collapsible": True,     # pode abrir/fechar
                "items": [
                    {
                        "title": _("Usuários"),
                        "icon": "person",
                        "link": reverse_lazy("admin:auth_user_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Grupos"),
                        "icon": "group",
                        "link": reverse_lazy("admin:auth_group_changelist"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                ],
            },
        ],
    },
}

CRISPY_ALLOWED_TEMPLATE_PACKS = ["unfold_crispy"]
CRISPY_TEMPLATE_PACK          = "unfold_crispy"
    